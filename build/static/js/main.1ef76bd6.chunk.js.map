{"version":3,"sources":["App/variables.js","App/helpers.js","WeatherWidget/WeatherWidget.js","WeatherWidget/helpers.js","App/App.js","index.js"],"names":["codeOpenweathermap","codeUnsplash","fetchWeather","city","a","fetch","then","res","json","fetchPictureCity","weather","toogleTheme","event","theme","target","textContent","document","querySelector","classList","toggle","toogleList","design","WeatherWidget","props","state","className","this","name","src","icon","alt","temp","main","Math","floor","React","Component","App","watchWeather","value","valueCity","setState","pictures","results","requestPictures","filterImages","el","filterConfig","dataset","filter","remove","add","width","height","class","onClick","type","id","data-filter","map","urls","small","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ef76bd6.chunk.js","sourcesContent":["export const codeOpenweathermap = 'e93da1268f6107847e8e343567ca21a2';\nexport const codeUnsplash = 'OqA15IgvA2dJfjZ91Ivs-MoPn9LwvH7Op3EUU1tBflo';\n","import { codeUnsplash, codeOpenweathermap } from './variables';\n\n\nexport async function fetchWeather(city) {\n    return await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${codeOpenweathermap}`)\n      .then(res => {\n        return res.json();\n      })\n  }\n  \nexport async function fetchPictureCity(city, weather) {\n    return await fetch(`https://api.unsplash.com/search/photos?page=1&query=${city}-${weather}&client_id=${codeUnsplash}`)\n      .then(res => {\n        return res.json();\n      })\n  }\n  \nexport function toogleTheme(event) {\n    const theme = event.target.textContent === \"светлая\" ? \"темная\" : \"светлая\";\n    event.target.textContent = theme;\n    document.querySelector(\"body\").classList.toggle(\"dark-theme\");\n  }\n  \nexport function toogleList(event) {\n    const design = event.target.textContent === \"плитку\" ? \"список\" : \"плитку\";\n    event.target.textContent = design;\n    document.querySelector(\".images-city\").classList.toggle(\"two-columns\");\n  }\n  ","import React from 'react';\nimport { calcTemperature } from './helpers';\n\nexport default class WeatherWidget extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = props.state\n    }\n    render() {\n      return (\n        <div className=\"weather\">\n          <div>{this.state.name}</div>\n          <div><img src={`http://openweathermap.org/img/w/${this.state.weather[0].icon}.png`} alt=\"\" /></div>\n          <div>{calcTemperature(this.state.main.temp)} {\"\\u2103\"}</div>\n        </div>\n      )\n    }\n  }\n  ","export function calcTemperature(temp) {\n    return Math.floor(temp - 273.15);\n  }\n  ","import React from 'react';\nimport './App.css';\nimport { fetchWeather, fetchPictureCity, toogleTheme, toogleList } from './helpers'\nimport WeatherWidget from './../WeatherWidget/WeatherWidget';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      valueCity: null, pictures: null, requestPictures: null\n    };\n  }\n\n   watchWeather = async () => {\n    const city = document.querySelector('#input-city').value\n    if (!city) return;\n\n    const valueCity = await fetchWeather(city);\n    this.setState({ valueCity })\n    const pictures = await fetchPictureCity(this.state.valueCity.name, this.state.valueCity.weather[0].main)\n    \n    this.setState({ pictures: pictures.results, requestPictures:  pictures.results})\n  }\n\n  filterImages = (event) => {\n    const el = event.target;\n    const filterConfig = el.dataset.filter;\n    document.querySelector(\".choice\").classList.remove(\"choice\");\n    el.classList.add(\"choice\");\n  \n    this.setState({ pictures: this.state.requestPictures.filter((el) => {\n          if (filterConfig === \"width\") return el.width > el.height;\n          else if (filterConfig === \"height\") return el.width < el.height;\n          return true;\n        }) \n      })\n  }\n  \n  \nrender() {\n  return (\n      <div className=\"App\">\n        <div class=\"change-theme\">Сменить тему: <span onClick={toogleTheme}>темная</span></div>\n        <div className=\"form-group\">\n            <input type=\"text\" name=\"user_name\" id=\"input-city\"/>\n            <button onClick={this.watchWeather}>Посмотреть погоду</button>\n        </div>\n        { !!this.state.valueCity && <WeatherWidget state={this.state.valueCity} /> }\n        { !!this.state.pictures &&  \n            <div className=\"images-block\">\n              <div className=\"filter-group\">\n                <div className=\"filter\" onClick={this.filterImages}>\n                    Фильтр по фото:&nbsp;\n                    <span className=\"choice\" data-filter=\"all\">Все&nbsp;</span>\n                    <span data-filter=\"width\">Горизонтальные&nbsp;</span> \n                    <span data-filter=\"height\">Вертикальные</span>\n                </div>\n                <div className=\"filter\" onClick={toogleList}>\n                  Переключить дизайн на: <span>список</span>\n                </div>\n              </div>\n              \n              <div className=\"images-city\">\n                {this.state.pictures.map((el) => {\n                  return (\n                  <div className=\"image\" key={el.id}>\n                    <img src={el.urls.small} alt=\"\" />\n              </div>\n            )\n          })}\n        </div>\n      </div> }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}